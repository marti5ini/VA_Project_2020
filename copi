<template>
    <div class="binary container">
        <h2 class="h2-responsive indigo-text flex-center">Bivariate Case</h2>
        <div class="container my-5 p-5 z-depth-1">
            <h5>Choose a dataset</h5>
            <!-- Basic dropdown -->
            <div id="graph-params" class="col-md-10">
                <mdb-btn-group v-model="selected">
                    <mdb-btn v-for="(item, i) in dataset.options"
                             :key="item.key"
                             :label="item.label"
                             :value="item.key"
                             @click.native="current = i"
                             :class="{current: i === current}"
                             color="primary"
                    >{{item.label}}</mdb-btn>
                </mdb-btn-group>
                {{dataset.options[current].nodes}}
                <binaryViz :nodesNames="dataset.options[current].nodes"/>
            </div>
            {
            key: 'undata',
            nodes: [{
            name: "Age",
            x: 60,
            y: 100
            }, {
            name: "Latitude",
            x: 320,
            y: 100
            }],
            edges: [{
            source: 0,
            target: 1
            }],
            path_resX: './data/undata/residuals/residuals_x.csv',
            path_resY: './data/undata/residuals/residuals_y.csv',
            fwd: './data/undata/gpr/fwd',
            bwd: './data/undata/gpr/bwd'
            },
        </div>
    </div>
</template>

<script>
    import { mdbBtn, mdbBtnGroup } from 'mdbvue';
    import binaryViz from "../components/binaryViz";
    const d3 = require('d3');

    export default {
        name: 'binaryDep',
        components: {
            mdbBtn,
            mdbBtnGroup,
            binaryViz
        },
        data() {
            return {
                current: 0,
                selected: 'dataset1',
                dataset: {
                    options: [
                        {
                            key: 'dataset1',
                            label: 'abalone',
                            nodes: ['rings', 'length'],
                            path: 'public/data/abalone.csv',
                        },
                        {
                            key: 'dataset2',
                            label: 'faithful',
                            nodes: ['eruptions', 'waiting'],
                            path: 'public/data/faithful.csv',
                        },
                        {
                            key: 'dataset3',
                            label: 'climate',
                            nodes: ['altitude', 'temperature'],
                            path: 'public/data/climate.csv',
                        },
                        {
                            key: 'dataset4',
                            label: 'undata',
                            nodes: ['age', 'capital latitude'],
                            path: 'public/data/undata.csv',
                        }
                    ]
                },
            }
        }
    }
</script>

<style scoped>
    .binary h2{
        margin-top: 2.3em;
        font-weight: bold;
    }
    .binary .my-5 {
        margin-top: 2rem !important;
    }
    mdb-btn {
        text-decoration-color: white;
    }
    button.btn.btn-primary.ripple-parent.current {
        background-color: #0069d9 !important;
        border-color: #005cbf !important;
    }
    #graph-viz {
        padding-left: 0;
    }
    #graph-params{
        padding-left: 0;
    }
    .active {
        stroke: #000;
        stroke-width: 2px;
    }

    path.link {
        fill: none;
        stroke: #333;
        stroke-width: 6px;
        cursor: default;
    }

    path.link:hover{
        stroke: rgb(94, 196, 204);
    }

    g.connect-node circle{
        fill: #BEFFFF;
    }

    path.link.hidden{
        stroke-width: 0;
    }

    path.link.selected {
        stroke: rgb(229, 172, 247);
    }
</style>


<<template>
    <div class="block">
        <div id="graph-viz" class="col-md-12">
            <svg width='100%' height='200'></svg>
        </div>
    </div>
</template>

<script>
    const d3 = require("d3");

    export default {
        name: "binaryViz",

        props: {
            nodesNames: Array
        },
        mounted() {
            this.initializeGraph();
        },
        methods: {
            initializeGraph() {
                this.drawGraph();
            },
            refreshGraph() {
                this.clearCircles();
                this.drawGraph();
            },
            clearCircles() {
                d3.selectAll("circle").remove();
            },
            drawGraph() {
                const nodes = this.nodesNames;
                const svg = d3.select("#graph-viz svg")
                    .selectAll("circle");

                const g = svg.append("g")
                    .attr("cursor", "grab");

                g
                    .enter()
                    .data(nodes)
                    .join("circle")
                    .attr("cx", function (d, i) {
                        return (i + 1) * 70;
                    })
                    .attr('cy', '100')
                    .attr('r', 30)
                    .attr("class", "circle")
                    .style('fill', '#3f51b5')
                    .on("mouseover", function () {
                        d3.select(this).style("cursor", "move");
                    })
                    .on("mouseout", function (d) {
                    })
                    .call(
                        // Attach drag event handlers to the circle
                        d3
                            .drag()
                            .on('start', dragStart)
                            .on('drag', drag)
                    );

                let offset = {x: 0, y: 0};

                // dragStart is called once
                function dragStart() {
                    // Set the offset values
                    offset.x = d3.event.x - d3.select(this).attr('cx');
                    offset.y = d3.event.y - d3.select(this).attr('cy');
                }

                // drag is called continuously
                function drag() {
                    // Set the value of the circle coordinates
                    // and maintain the click/touch offset
                    d3.select(this)
                        .attr('cx', d3.event.x - offset.x)
                        .attr('cy', d3.event.y - offset.y);
                }
            }
        },
        watch: {
            nodesNames: {
                handler() {
                    this.refreshGraph();
                },
                deep: true,
            }
        }
    }
</script>

<style scoped>
    #graph-viz {
        padding-left: 0;
    }
    body{
        margin: 0;
        padding: 0;
        overflow:hidden;
    }

    p{
        text-align: center;
        overflow: overlay;
        position: relative;
    }

    body{
        -webkit-touch-callout: none;
        -webkit-user-select: none;
        -khtml-user-select: none;
        -moz-user-select: none;
        -ms-user-select: none;
        user-select: none;
        background-color: rgb(248, 248, 248)
    }

    #toolbox{
        position: absolute;
        bottom: 0;
        left: 0;
        margin-bottom: 0.5em;
        margin-left: 1em;
        border: 2px solid #EEEEEE;
        border-radius: 5px;
        padding: 1em;
        z-index: 5;
    }

    #toolbox input{
        width: 30px;
        opacity: 0.4;
    }
    #toolbox input:hover{
        opacity: 1;
        cursor: pointer;
    }

    #hidden-file-upload{
        display: none;
    }

    #download-input{
        margin: 0 0.5em;
    }

    .conceptG text{
        pointer-events: none;
    }

    marker{
        fill: #333;
    }

    g.conceptG circle{
        fill: #F6FBFF;
        stroke: #333;
        stroke-width: 2px;
    }

    g.conceptG:hover circle{
        fill: rgb(200, 238, 241);
    }

    g.selected circle{
        fill: rgb(250, 232, 255);
    }
    g.selected:hover circle{
        fill: rgb(250, 232, 255);
    }

    path.link {
        fill: none;
        stroke: #333;
        stroke-width: 6px;
        cursor: default;
    }

    path.link:hover{
        stroke: rgb(94, 196, 204);
    }

    g.connect-node circle{
        fill: #BEFFFF;
    }

    path.link.hidden{
        stroke-width: 0;
    }

    path.link.selected {
        stroke: rgb(229, 172, 247);
    }
</style>


<style>
    export default{
        methods: {
    let offset = {x: 0, y: 0};

    function dragStart() {
    // Set the offset values
    offset.x = d3.event.x - d3.select(this).attr('cx');
        offset.y = d3.event.y - d3.select(this).attr('cy');
    }

    function drag(d, i) {
        d3.select(this)
        .attr('cx', d3.event.x - offset.x)
    .attr('cy', d3.event.y - offset.y);
    links.each(function (l) {
    if (l.source === i) {
        d3.select(this).attr("x1", d3.event.x - offset.x).attr("y1", d3.event.y - offset.y);
    } else if (l.target === i) {
        d3.select(this).attr("x2", d3.event.x - offset.x).attr("y2", d3.event.y - offset.y);
    }
    });
    }

    var links = svg.selectAll("link")
    .data(edges)
    .enter()
    .append("line")
    .attr("class", "link")
    .attr("x1", function (l) {
    var sourceNode = nodes.filter(function (d, i) {
        return i === l.source
    })[0];
    d3.select(this).attr("y1", sourceNode.y);
    return sourceNode.x
    })
    .attr("x2", function (l) {
    var targetNode = nodes.filter(function (d, i) {
        return i === l.target
    })[0];
    d3.select(this).attr("y2", targetNode.y);
    return targetNode.x
    })
    .attr("fill", "none")
    .attr("stroke", "black");

    const g = svg.selectAll("node")
    .attr("cursor", "grab");

    g
    .data(nodes)
    .enter()
    .append("circle")
    .attr("cx", function (d) {
        return d.x
    })
    .attr("cy", function (d) {
        return d.y
    })
    .attr('r', 35)
    .style('fill', '#3f51b5')
    .on("mouseover", function () {
        d3.select(this).style("cursor", "move");
    })
    .on("mouseout", function (d) {
    })
    .call(
    // Attach drag event handlers to the circle
       d3
       .drag()
    .on('start', dragStart)
    .on('drag', drag)
    );
    g.append('text')
    .attr('x', 0)
    .attr('y', 4)
    .attr('class', 'id')
    .text(function(d) { return d.name; })
    }
        }
    }
</style>

<template>
    <div class="block">
        <div id="graph-viz" class="col-md-12">
            <svg width="100%" height="300"></svg>
        </div>
    </div>
</template>

<script>
    const d3 = require("d3");

    export default {
        name: "binaryViz",

        props: {
            nodes: Array,
            edges: Array
        },
        mounted() {
            this.initializeGraph();
        },
        methods: {
            initializeGraph() {
                this.drawGraph();
            },
            refreshGraph() {
                this.clearCircles();
                this.drawGraph();
            },
            clearCircles() {
                d3.selectAll("circle").remove();
                d3.selectAll("text").remove();
            },
            drawGraph() {
                const nodes = this.nodes;
                const edges = this.edges;
                const svg = d3.select("#graph-viz svg");

                let offset = {x: 0, y: 0};

                function dragStart() {
                    offset.x = d3.event.x - d3.select(this).attr('cx');
                    offset.y = d3.event.y - d3.select(this).attr('cy');
                }

                function drag(d, i) {

                    d3.select(this).attr("cx", d.x = d3.event.x).attr("cy", d.y = d3.event.y);

                    // d3.select(this).select("text").attr("x", d.x = d3.event.x).attr("y", d.y = d3.event.y);


                    links.each(function (l) {
                        if (l.source === i) {
                            d3.select(this).attr("x1", d3.event.x - offset.x).attr("y1", d3.event.y - offset.y);
                        } else if (l.target === i) {
                            d3.select(this).attr("x2", d3.event.x - offset.x).attr("y2", d3.event.y - offset.y);
                        }
                    });
                }
                function dragEnd() {

                }


                var links = svg.selectAll("link")
                    .data(edges)
                    .enter()
                    .append("line")
                    .attr("class", "link")
                    .attr("x1", function (l) {
                        var sourceNode = nodes.filter(function (d, i) {
                            return i === l.source
                        })[0];
                        d3.select(this).attr("y1", sourceNode.y);
                        return sourceNode.x
                    })
                    .attr("x2", function (l) {
                        var targetNode = nodes.filter(function (d, i) {
                            return i === l.target
                        })[0];
                        d3.select(this).attr("y2", targetNode.y);
                        return targetNode.x
                    })
                    .attr("fill", "none")
                    .attr("stroke", "black");


                var g = svg.selectAll("node")
                    .attr("cursor", "grab")



                g
                    .data(nodes)
                    .enter()
                    .append("circle")
                    .attr("cx", function (d) {
                        return d.x
                    })
                    .attr("cy", function (d) {
                        return d.y
                    })
                    .attr('r', 35)
                    .style('fill', '#3f51b5')
                    .on("mouseover", function () {
                        d3.select(this).style("cursor", "move");
                    })
                    .on("mouseout", function (d) {
                    })
                    .call(
                        // Attach drag event handlers to the circle
                        d3
                            .drag()
                            .on('start', dragStart)
                            .on('drag', drag)
                    );

                var text = g.append("text")
                    .attr("x", function(d) { return d.x; })
                    .attr("y", function(d) { return d.y; })

                    .attr('alignment-baseline', 'middle')
                    .attr('text-anchor', 'middle')
                    .attr('class', function(d, i) {return i})
                    .text(function(d) {
                        return d.name;
                    })
                    .style('font-size', d => 35 * 0.4 + 'px')
                    .attr("fill", "white");

            }
        },
        watch: {
            nodes: {
                handler() {
                    this.refreshGraph();
                },
                deep: true,
            }
        }
    }
</script>

<style scoped>
    #graph-viz {
        padding-left: 0;
    }

    text.id {
        color: red;
        font-size: 20px;
    }

</style>

